## Vars
##------------------------------------------------------------------------------
# vim_fzf awareness
is_vim_fzf="ps -o state= -o comm= -t '#{pane_tty}' | \
grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?|fzf)(diff)?$'"
# vim awareness
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | \
grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

## Settings
##------------------------------------------------------------------------------
# start a non-login shell
set -g default-command "${SHELL}"
# shell movements inside tmux prompt
set -g status-keys "emacs"
# specify tmux to use 256 colors
set -g default-terminal "tmux-256color"
# renumber windows
set -g renumber-windows on
# renumber sessions
set-hook -g session-created "run ~/.dotfiles/tmux/rename_sessions.sh"
set-hook -g session-closed "run ~/.dotfiles/tmux/rename_sessions.sh"
# update environment variables
set -g update-environment terminal
# do not let tmux set the window title
set -g set-titles off
# limit scrollback
set -g history-limit 100000

## Configurations
##------------------------------------------------------------------------------
## Status bar sections
set -g status-style fg='colour252',bg='colour236'

# see the full title of the window
set -g status-left-length 30
set -g status-left "\
#[fg=colour236, bg=colour252, bold]#{?client_prefix,#[fg=colour236 bg=colour3],} #S: \
#[fg=colour252, bg=colour236]#{?client_prefix,#[fg=colour3],}"

set -g status-right-length 60
set -g status-right "\
#[fg=colour23, bg=colour236]\
#[fg=colour255, bg=colour23] %b-%d %R\
#[fg=colour130, bg=colour23] \
#[fg=colour252, bg=colour130, bold] #H \
"

setw -g window-status-separator ''

setw -g window-status-current-format "\
#[fg=colour236, bg=colour25]\
#[fg=colour255, bg=colour25, bold] #I:#W*#{?window_zoomed_flag,🔍,} \
#[fg=colour25, bg=colour236]\
"

setw -g window-status-format "\
#[fg=colour252, bg=colour236] #I:#W#{?window_zoomed_flag,🔍,} \
#[fg=colour252]"
setw -g window-status-activity-style "default"

## Mappings
##------------------------------------------------------------------------------
# remap prefix key
unbind C-b
set -g prefix C-f
bind C-f send-prefix

# reload config file
bind r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

# friendly split pane
unbind -T prefix %
unbind -T prefix '"'
unbind -T prefix "'"
bind -T prefix '\' split-window -h -c "#{pane_current_path}"
bind -T prefix "'" split-window -v -c "#{pane_current_path}"
bind -T prefix c new-window -c "#{pane_current_path}"

# break pane: move pane to a new window
unbind -T prefix !
bind -T prefix b break-pane -d
# join pane: move a pane from another window
bind -T prefix j command-prompt -p "join pane from:" "join-pane -h -s '%%'"
# swap panes (targeted by number)
bind -T prefix e display-panes\; command-prompt -p "swap with pane #:" "swap-pane -t '%%'"

# use N instead of p to navigate to previous window
unbind -T prefix p # required to vim syle copy-paste
bind -T prefix N previous-window

# mouse toogle
bind -T prefix m set-option -g mouse on \; display 'Mouse: ON'
bind -T prefix M set-option -g mouse off \; display 'Mouse: OFF'

# Smart pane switching with awareness of Vim splits.
bind -n 'C-j' if-shell "$is_vim_fzf" 'send-keys C-j' 'select-pane -D'
bind -n 'C-k' if-shell "$is_vim_fzf" 'send-keys C-k' 'select-pane -U'
bind -n 'C-h' if-shell "$is_vim" 'send-keys C-h' 'select-pane -L'
bind -n 'C-l' if-shell "$is_vim" 'send-keys C-l' 'select-pane -R'
bind -T copy-mode-vi 'C-j' select-pane -D
bind -T copy-mode-vi 'C-k' select-pane -U
bind -T copy-mode-vi 'C-h' select-pane -L
bind -T copy-mode-vi 'C-l' select-pane -R

# restore clean screen
bind -T prefix C-l send-keys 'C-l'
# restore delete to end of line
bind -T prefix C-k send-keys 'C-k'

# resize panes
bind -n S-Left resize-pane -L 10
bind -n S-Right resize-pane -R 10
bind -n S-Down resize-pane -D 5
bind -n S-Up resize-pane -U 5

bind -n C-S-Left resize-pane -L 2
bind -n C-S-Right resize-pane -R 2
bind -n C-S-Down resize-pane -D 1
bind -n C-S-Up resize-pane -U 1

# X-clipboard integration Vim style
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -i -sel clip > /dev/null"
bind -T prefix p run "xclip -o -sel clip | tmux load-buffer - ; tmux paste-buffer"
