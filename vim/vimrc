set nocompatible                     " Disable vi compatibility
let g:mapleader = "\<Space>"         " Make leader more accessible
let g:maplocalleader = "\<Space>"    " Make leader more accessible

" Enable ship-in vim plugins
runtime macros/matchit.vim  " Enhances %: it jumps between keyword pairs

" Plugin manager(vim-plug) to update run :PlugUpgrade
" automatically runs: 'filetype plugin indent on' and 'syntax enable'
call plug#begin('~/.vim/plugged')
" improve vim usage
Plug 'yggdroot/indentLine'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'

" tmux integration
Plug 'christoomey/vim-tmux-navigator'
Plug 'christoomey/vim-tmux-runner'

" ease code navigation
Plug 'junegunn/fzf.vim'
Plug 'airblade/vim-rooter'
Plug 'ludovicchabant/vim-gutentags'

" ease team collaboration
Plug 'tpope/vim-fugitive'
Plug 'editorconfig/editorconfig-vim'

" add autocomplete/snippets
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'SirVer/ultisnips'
Plug 'mattn/emmet-vim'

" languages/frameworks
" javascript/jsx
Plug 'yuezk/vim-js'
Plug 'maxmellon/vim-jsx-pretty'
" ruby on rails
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'

" writing (no code)
Plug 'pratikbhusal/vim-grip'
Plug 'lervag/vimtex'

" improve vim's look
Plug 'chriskempson/base16-vim'
Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'

" All Plugins must be added before the following line
call plug#end()

"" Plugins Settings
" indentLine
let g:indentLine_char = '│'
let g:indentLine_fileTypeExclude = ['json']
let g:indentLine_bufTypeExclude = ['help', 'netrw', 'terminal']

" AutoPairs
" enable use of some alt keys
set <M-b>=b
set <M-s>=s
set <M-j>=j
let g:AutoPairsShortcutBackInsert = '<M-b>'
let g:AutoPairsShortcutFastWrap = '<M-s>'
let g:AutoPairsShortcutJump = '<M-j>'
let g:AutoPairsFlyMode = 1

" vim-tmux-navigation
" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =
" zoom vim panes like tmux
nnoremap <silent> <leader>- :wincmd _ <cr>:wincmd \|<cr>
nnoremap <silent> <leader>= :wincmd = <cr>
" Write all buffers before navigating from Vim to tmux pane (1 :update, 2 :wall)
let g:tmux_navigator_save_on_switch = 1
" Disable tmux navigator when zooming the Vim pane
let g:tmux_navigator_disable_when_zoomed = 1

" vim-tmux-runner
nnoremap <leader>to :VtrOpenRunner {'orientation': 'h', 'percentage': 50}<cr>
nnoremap <leader>ta :VtrAttachToPane<cr>
nnoremap <leader>tk :VtrKillRunner<cr>
" clear command buffer and ask for command
nnoremap <leader>tc :VtrFlushCommand<cr>:VtrSendCommand<cr>
" send selected text
nnoremap <silent> <leader>ts :VtrSendLinesToRunner<cr>
vnoremap <silent> <leader>ts y:VtrSendCommand <c-r>"<cr><cr>

" vim-rooter
let g:rooter_silent_chdir = 1
let g:rooter_change_directory_for_non_project_files = 'current'
let g:rooter_patterns = ['.git/']

" fzf
let g:fzf_layout = {'down': '12'}
function! FzfFiles(query, fullscreen)
    let spec = {
        \ 'source': 'fd --type f --hidden --exclude .git --exclude node_modules',
        \ 'options': ['--prompt=>> ']
        \}
    call fzf#vim#files(a:query, spec, a:fullscreen)
endfunction
function! FzfSearch(query, fullscreen)
    let args = '--no-heading --column --smart-case --color=always '
    let colors = "--colors 'path:fg:2' --colors 'path:style:bold'
                \ --colors 'line:fg:3' --colors 'line:style:intense'
                \ --colors 'match:fg:39' --colors 'match:style:bold' "
    let cmd = 'rg ' . args . colors . '%s || true'
    let initial = printf(cmd, shellescape(a:query))
    let reload = printf(cmd, '{q}')
    let spec = {
        \'options': ['--prompt=>> ', '--phony', '--query', a:query,
        \ '--color=bg+:18',
        \ '--bind', 'ctrl-d:cancel,change:reload:'.reload]
        \}
    call fzf#vim#grep(initial, 1, spec, a:fullscreen)
endfunction
command! -bang -nargs=? -complete=dir Files call FzfFiles(<q-args>, <bang>0)
command! -bang -nargs=? Search call FzfSearch(<q-args>, <bang>0)

" Netrw (file explorer)
let g:netrw_banner = 0
let g:netrw_liststyle = 0
let g:netrw_fastbrowse = 0
let g:netrw_list_hide = '.git, node_modules'

" Gutentags
let g:gutentags_ctags_extra_args = ['--fields=+l']
let g:gutentags_file_list_command = 'git ls-files -oc --exclude-standard'

" Coc
" don't give |ins-completion-menu| messages
set shortmess+=c
inoremap <expr> <tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <s-tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Ultisnips
let g:UltisnipsEnableSnipMate = 0
let g:UltiSnipsEditSplit = 'context'
let g:UltiSnipsSnippetsDir = '~/.vim/xnippets'
let g:UltiSnipsSnippetDirectories=["xnippets"]
let g:UltiSnipsExpandTrigger = '<nop>'

" emmet-vim
let g:user_emmet_leader_key = '<C-y>'
let g:user_emmet_settings = {
\   'javascript' : {
\       'extends' : 'jsx',
\   },
\}

" vim-grip
let g:grip_disable_when_no_jobs = 1
let g:grip_default_map = 0

" vimtex
let g:tex_flavor = "latex"

" vim-airline
set laststatus=2
let g:airline_theme = 'base16_classic'
let g:airline_powerline_fonts = 1
let g:airline_section_c = airline#section#create(['%{expand("%:h")}', 'readonly'])
let g:airline_section_z = '%l/%L ㏑: %c'
let g:airline_extensions = ['branch', 'coc', 'fugitiveline',
            \ 'netrw', 'quickfix', 'tabline', 'vimtex', 'whitespace']
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#show_close_button = 0
let g:airline_exclude_preview = 1
let g:airline_detect_spell = 0
let g:airline_skip_empty_sections = 1
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'

"" Commands
" Save file opened without root permission
command! W :execute ':silent w !sudo tee % > /dev/null' | :edit!

"" Mappings
" Use kj to escape from insert/visual/command mode
inoremap kj <esc>
vnoremap kj <esc>
cnoremap kj <esc>
" Navigate between buffers
nnoremap <leader>p :bprevious<cr>
nnoremap <leader>n :bnext<cr>
nnoremap <leader>q :bprevious<bar>bdelete #<cr>
"  Toggle file explorer
nnoremap <silent><expr> <leader>e exists("w:netrw_rexlocal") ? ":Rexplore<cr>" : ":Explore<cr>"
" Use fzf to quickly navigate project
nnoremap <leader>f :Files<cr>
nnoremap <leader>s :Search<cr>
" Interchange meaning of 0 and ^
noremap 0 ^
noremap ^ 0
" sort selected lines
vnoremap <silent><f5> :sort<cr>
" Clear the last used seach pattern
nnoremap <silent><leader>l :let @/ = ""<cr>
" Open vim config file
nnoremap <leader>vim :e $MYVIMRC<cr>
" Reload vim config
nnoremap <leader>re :source $MYVIMRC<cr>
" Open coc config file
nnoremap <leader>coc :CocConfig<cr>

""" General
set wildmenu		            " Display completion matches in a status line
set relativenumber              " Show line numbers relative to cursor
set number                      " Show cursor line number

set scrolloff=5                 " Maintain N lines of context
set showmatch                   " Highlight matching brace
set matchpairs+=<:>             " Add matching pairs to % command

set splitbelow                  " New windows below the current one
set splitright                  " New windows right of the current one

set hidden                      " Don't unload hidden buffers (change buffers without saving)

set wrap                        " Visual wrap of lines (enabled by default)
set textwidth=80                " Hard wrap, modifies text in the buffer
set linebreak                   " Avoid words's breaking at end of display line
set breakindent                 " Word wrap preserving identation

set colorcolumn=+1              " Add visual indicator for hard wrap
set cursorline                  " Highlight current line

set hlsearch                    " Highlight all search results
set incsearch                   " Searches for strings incrementally
set smartcase                   " Case sensitive if search contains uppercase

set autoindent                  " Auto-indent new lines
set smartindent                 " Enable smart-indent
set shiftwidth=0                " Auto-indent spaces (when 0 use tabstop value)

set expandtab                   " Use spaces instead of tabs
set tabstop=4                   " Spaces a tab in the file counts for
set softtabstop=-1              " Spaces a tab counts for while editing (when negative use shiftwidth value)
set smarttab                    " Enable smart-tabs

set undolevels=200              " Number of undo levels
set backspace=indent,eol,start  " Backspacing over everything in insert mode

set pastetoggle=<F2>            " toogle auto-indenting for code paste
set clipboard=unnamedplus       " access system clipboard

if filereadable(expand("~/.vimrc_background"))
    let base16colorspace=256
    source ~/.vimrc_background
endif

" Fix status line colors for airline base16_classic theme
if g:airline_theme == "base16_classic"
    hi StatusLine cterm=NONE ctermfg=15 ctermbg=19
    hi WildMenu cterm=bold ctermfg=0 ctermbg=10
endif
